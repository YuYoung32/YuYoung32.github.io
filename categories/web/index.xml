<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>web on YuYoung&#39;s Blog</title>
    <link>https://yuyoung32.github.io/categories/web/</link>
    <description>Recent content in web on YuYoung&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Tue, 01 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://yuyoung32.github.io/categories/web/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>关于Gin&#43;Vue的项目协作流程</title>
      <link>https://yuyoung32.github.io/post/%E5%85%B3%E4%BA%8Egin&#43;vue%E7%9A%84%E9%A1%B9%E7%9B%AE%E5%8D%8F%E4%BD%9C%E6%B5%81%E7%A8%8B/</link>
      <pubDate>Tue, 01 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yuyoung32.github.io/post/%E5%85%B3%E4%BA%8Egin&#43;vue%E7%9A%84%E9%A1%B9%E7%9B%AE%E5%8D%8F%E4%BD%9C%E6%B5%81%E7%A8%8B/</guid>
      <description>流程图 后端 设计理念 配置与程序分离，单独写在配置文件里方便修改 log记录在文件里持久化 redis记录session更快速 主引擎注册 使用gin.New()创建引擎，或者使用gin.Default()创建引擎并自动使用中间件gin.Logger()和gin.Recovery()两个中间件。
使用中间件 中间件需要在路由前或者创建路由时使用，这里可以在所有路由前使用中间件即全局中间件。
gin.GET(&amp;#39;/path&amp;#39;,HandlerFunc,Middleware) 中间件
以ctx.Next()为分界线，之前的为在请求前执行，之后的为在请求后执行。
众多中间件形成方法链，使用ctx.Abort()终止方法链并直接退出当前请求。
使用日志库 快速了解
logrus是一个常见的日志记录库。使用方法，先注册，再使用。
注册：
Log = logrus.New() Log.Out = file	//设置输出文件（需可写权限） Log.SetLevel(logrus.DebugLevel)	//设置指定等级以上才输出 Log.SetFormatter(&amp;amp;logrus.JSONFormatter{}) //设置输出格式 在程序任何部位使用：
Log.Infof(...) 使用Session Session是一种保存会话的机制，用来记录用户状态信息。根据保存位置的不同可以分为基于Cookie的和基于Redis的。先注册，再使用。在gin中以中间件的形式注册Session：
//基于cookie的session cstore := cookie.NewStore([]byte(&amp;#34;secret&amp;#34;)) router.Use(sessions.Sessions(&amp;#34;gin_session&amp;#34;, cstore)) //基于redis的session //最大连接数，连接模式，连接Host，密码,加密的盐 rstore, _ := redis.NewStore(10, &amp;#34;tcp&amp;#34;, &amp;#34;host:6379&amp;#34;, &amp;#34;password&amp;#34;, []byte(&amp;#34;secret&amp;#34;)) router.Use(sessions.Sessions(&amp;#34;gin_session&amp;#34;, rstore)) 在handler或middleware里使用：
session := sessions.Default(ctx) session.Set(&amp;#34;age&amp;#34;, &amp;#34;100&amp;#34;) session.Get(&amp;#34;name&amp;#34;) 使用数据验证器 在结构体里使用tag里的binding进行验证时，可以设置自己需要的验证逻辑。
if v, ok := binding.Validator.Engine().(*validator.Validate); ok { v.RegisterValidation(&amp;#34;len_valid6&amp;#34;, func(fl validator.FieldLevel) bool { return len(fl.</description>
    </item>
    
  </channel>
</rss>
